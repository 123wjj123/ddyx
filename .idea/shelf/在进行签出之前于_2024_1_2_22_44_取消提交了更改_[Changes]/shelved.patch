Index: spzx-manager/src/main/java/com/atguigu/spzx/manager/service/impl/SysUserServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.atguigu.spzx.manager.service.impl;\r\n\r\nimport cn.hutool.core.util.StrUtil;\r\nimport com.alibaba.fastjson.JSON;\r\nimport com.atguigu.spzx.common.exception.GuiguException;\r\nimport com.atguigu.spzx.common.log.annotation.Log;\r\nimport com.atguigu.spzx.manager.mapper.SysRoleUserMapper;\r\nimport com.atguigu.spzx.manager.mapper.SysUserMapper;\r\nimport com.atguigu.spzx.manager.service.SysUserService;\r\nimport com.atguigu.spzx.model.dto.system.AssginRoleDto;\r\nimport com.atguigu.spzx.model.dto.system.LoginDto;\r\nimport com.atguigu.spzx.model.dto.system.SysUserDto;\r\nimport com.atguigu.spzx.model.entity.system.SysUser;\r\nimport com.atguigu.spzx.model.vo.common.ResultCodeEnum;\r\nimport com.atguigu.spzx.model.vo.system.LoginVo;\r\nimport com.github.pagehelper.PageHelper;\r\nimport com.github.pagehelper.PageInfo;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.data.redis.core.RedisTemplate;\r\nimport org.springframework.stereotype.Service;\r\nimport org.springframework.transaction.annotation.Transactional;\r\nimport org.springframework.util.DigestUtils;\r\n\r\nimport java.util.List;\r\nimport java.util.UUID;\r\nimport java.util.concurrent.TimeUnit;\r\n\r\n@Service\r\npublic class SysUserServiceImpl implements SysUserService {\r\n\r\n    @Autowired\r\n    private SysUserMapper sysUserMapper;\r\n\r\n    @Autowired\r\n    private SysRoleUserMapper sysRoleUserMapper;\r\n\r\n    @Autowired\r\n    private RedisTemplate<String,String> redisTemplate;\r\n\r\n    //用户登录\r\n    @Override\r\n    public LoginVo login(LoginDto loginDto) {\r\n\r\n        //获取输入验证码和存储到redis的key名称  loginDto获取到\r\n        String captcha = loginDto.getCaptcha();\r\n        String key = loginDto.getCodeKey();\r\n\r\n        //2 根据获取的redis里面key ，查询redis里面存储验证码\r\n        // set(\"user:validate\"+key\r\n        String redisCode = redisTemplate.opsForValue().get(\"user:validate\" + key);\r\n\r\n        //3 比较输入的验证码和 redis存储验证码是否一致\r\n        if(StrUtil.isEmpty(redisCode) || !StrUtil.equalsIgnoreCase(redisCode,captcha)) {\r\n            //4 如果不一致，提示用户，校验失败\r\n            throw new GuiguException(ResultCodeEnum.VALIDATECODE_ERROR);\r\n        }\r\n\r\n        //5 如果一致，删除redis里面验证码\r\n        redisTemplate.delete(\"user:validate\" + key);\r\n\r\n        //1 获取提交用户名，loginDto获取到\r\n        String userName = loginDto.getUserName();\r\n\r\n        //2 根据用户名查询数据库表 sys_user表\r\n        SysUser sysUser = sysUserMapper.selectUserInfoByUserName(userName);\r\n\r\n        //3 如果根据用户名查不到对应信息，用户不存在，返回错误信息\r\n        if(sysUser == null) {\r\n//            throw new RuntimeException(\"用户名不存在\");\r\n            throw new GuiguException(ResultCodeEnum.LOGIN_ERROR);\r\n        }\r\n\r\n        //4 如果根据用户名查询到用户信息，用户存在\r\n        //5 获取输入的密码，比较输入的密码和数据库密码是否一致\r\n        String database_password = sysUser.getPassword();\r\n        String input_password =\r\n                DigestUtils.md5DigestAsHex(loginDto.getPassword().getBytes());\r\n        //比较\r\n        if(!input_password.equals(database_password)) {\r\n//            throw new RuntimeException(\"密码不正确\");\r\n            throw new GuiguException(ResultCodeEnum.LOGIN_ERROR);\r\n        }\r\n\r\n        //6 如果密码一致，登录成功，如果密码不一致登录失败\r\n        //7 登录成功，生成用户唯一标识token\r\n        String token = UUID.randomUUID().toString().replaceAll(\"-\",\"\");\r\n\r\n        //8 把登录成功用户信息放到redis里面\r\n        // key : token   value: 用户信息\r\n        redisTemplate.opsForValue()\r\n                .set(\"user:login\"+token,\r\n                        JSON.toJSONString(sysUser),\r\n                        7,\r\n                        TimeUnit.DAYS);\r\n\r\n        //9 返回loginvo对象\r\n        LoginVo loginVo = new LoginVo();\r\n        loginVo.setToken(token);\r\n        return loginVo;\r\n    }\r\n\r\n    //获取当前登录用户信息\r\n    @Override\r\n    public SysUser getUserInfo(String token) {\r\n        String userJson = redisTemplate.opsForValue().get(\"user:login\" + token);\r\n        SysUser sysUser = JSON.parseObject(userJson, SysUser.class);\r\n        return sysUser;\r\n    }\r\n\r\n    //用户退出\r\n    @Override\r\n    public void logout(String token) {\r\n        redisTemplate.delete(\"user:login\" + token);\r\n    }\r\n\r\n    //1 用户条件分页查询接口\r\n    @Override\r\n    public PageInfo<SysUser> findByPage(Integer pageNum,\r\n                                        Integer pageSize,\r\n                                        SysUserDto sysUserDto) {\r\n        PageHelper.startPage(pageNum,pageSize);\r\n        List<SysUser> list = sysUserMapper.findByPage(sysUserDto);\r\n        PageInfo<SysUser>  pageInfo = new PageInfo<>(list);\r\n        return pageInfo;\r\n    }\r\n\r\n    //2 用户添加\r\n    @Override\r\n    public void saveSysUser(SysUser sysUser) {\r\n        //1 判断用户名不能重复\r\n        String userName = sysUser.getUserName();\r\n        SysUser dbSysUser = sysUserMapper.selectUserInfoByUserName(userName);\r\n        if(dbSysUser != null) {\r\n            throw new GuiguException(ResultCodeEnum.USER_NAME_IS_EXISTS);\r\n        }\r\n\r\n        //2 输入密码进行加密\r\n        String md5_password = DigestUtils.md5DigestAsHex(sysUser.getPassword().getBytes());\r\n        sysUser.setPassword(md5_password);\r\n\r\n        //设置status值  1 可用  0 不可用\r\n        sysUser.setStatus(1);\r\n\r\n        sysUserMapper.save(sysUser);\r\n    }\r\n\r\n    //3 用户修改\r\n    @Override\r\n    public void updateSysUser(SysUser sysUser) {\r\n        sysUserMapper.update(sysUser);\r\n    }\r\n\r\n    //4 用户删除\r\n    @Override\r\n    public void deleteById(Long userId) {\r\n        sysUserMapper.delete(userId);\r\n    }\r\n\r\n    //用户分配角色\r\n    @Log(title = \"用户分配角色\",businessType = 0)\r\n    @Transactional\r\n    @Override\r\n    public void doAssign(AssginRoleDto assginRoleDto) {\r\n        //1 根据userId删除用户之前分配角色数据\r\n        sysRoleUserMapper.deleteByUserId(assginRoleDto.getUserId());\r\n\r\n\r\n        //2 重新分配新数据\r\n        List<Long> roleIdList = assginRoleDto.getRoleIdList();\r\n        //遍历得到每个角色id\r\n        for(Long roleId:roleIdList) {\r\n            sysRoleUserMapper.doAssign(assginRoleDto.getUserId(),roleId);\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/spzx-manager/src/main/java/com/atguigu/spzx/manager/service/impl/SysUserServiceImpl.java b/spzx-manager/src/main/java/com/atguigu/spzx/manager/service/impl/SysUserServiceImpl.java
--- a/spzx-manager/src/main/java/com/atguigu/spzx/manager/service/impl/SysUserServiceImpl.java	(revision 51de841da7b8aaa775e1f43241df89ac83a014db)
+++ b/spzx-manager/src/main/java/com/atguigu/spzx/manager/service/impl/SysUserServiceImpl.java	(date 1704206668058)
@@ -163,8 +163,6 @@
     public void doAssign(AssginRoleDto assginRoleDto) {
         //1 根据userId删除用户之前分配角色数据
         sysRoleUserMapper.deleteByUserId(assginRoleDto.getUserId());
-
-
         //2 重新分配新数据
         List<Long> roleIdList = assginRoleDto.getRoleIdList();
         //遍历得到每个角色id
